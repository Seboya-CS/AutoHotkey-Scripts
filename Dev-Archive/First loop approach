!+s::
{ 
	global notifyGroupID	; Declare the global variable within this function
	fileExistsBool := false
	writeOverBool := false
	fileLen := 0
	num := 0
	; The procedure checks if the files already exist and contain data, and if so requests the 
	; user to decide if the procedure should overwrite the information or save it. This will
	; eventually be modified to be a setting which the user can set and modify at will,
	; but for now it will prompt for an input.
	While fileExistsBool = false && num <= 11 {
		num := A_Index
		try {
			fileText := FileRead(xlPathArray[num])
			fileLen := StrLen(fileText)
		} catch Error as err {
		}												; We don't need to take any action if there's an error.
		If (fileLen >= 1) {
			fileExistsBool := true
		}
	}
	
	If (fileExistsBool) {
		response := InputBox('Submit "1" to write over the current files. Submit "2" to move'
			' the current files to the archive directory. Submit "0" to cancel and end the script.', , , "2")
		
		If (response = "0") {
			ExitApp
		} else if (response = "2") {
			if (archiveDirectory = "") {
				newDirName := "Archive-files-" . A_Now
				newDirPath := workingDir . "Archive/" . newDirName
				try {
					DirCreate newDirPath
				} catch Error as err {
					response := InputBox('There was an error creating the archive directory.'
															' Submit "0" to cancel and end the script. Submit'
															' anything else to write over the current files.', , , "1")
					If (response = "0") {
						ExitApp
					} else {
						writeOverBool := true
					}
				} else {
					archiveDirectory := newDirPath
				}
			} else {
				Loop 11 {
					try {
						FileMove(xlPathArray("A_Index"), newDirPath)
					}
				}
			}
		}
	}
	
  ; Initialize Excel COM object (or connect to an existing one)
    xl := ComObject("Excel.Application") 		; Note: `ComObject("Excel.Application")` is used to initialize 
    xl.Visible := False											; a new instance of Excel, which is what we want in this
    wb := xl.workbooks.open(xlpath)				; case. For attaching to an existing Excel instance, use 
	ws := wb.worksheets(xlSheet)					; `ComObjActive("Excel.Application")`
    ws.activate
	
    ; Loop through each column
    Loop nCol
    {
        col := A_Index			; `A_Index` = the current loop as an integer. Starts from 1.
        columnData := ""		; Reset columnData
        Loop nRow		; Loop through every row in col
        {
							
            row := A_Index
            cellValue := ws.Cells(row + startRow - 1, col + startCol - 1).Value	
			
			; Occasionally, the group ID contained within the spreadsheet will have an erroneous
			; character at the beginning or end. These next lines will identify it, remove it, and
			; update notifyGroupID with the information for reporting.
			firstChar := SubStr(cellValue, 1, 1)
			strL := StrLen(cellValue)
			lastChar := SubStr(cellValue, strL, 1)
			if (IsNumber(firstChar) = false) {
				tempStr := SubStr(cellValue, 2, strL - 1)
				strL := StrLen(tempStr)
				updateGroupID(firstChar, row, cellValue)
			} else {
				tempStr := cellValue
			}
			if (IsNumber(lastChar) = false) {
				finalStr := SubStr(tempStr, 1, strL - 1)
				updateNotifyMsg(lastChar, row, cellValue)
			} else {
				finalStr := tempStr
			}
			
			; The procedure stores the entire column data into a string, and then it writes
			; the string to the file. There are many different ways this can be done, each with pros
			; and cons. For the purpose of this script, I decided to delimit each data entry with a new
			; line, and include the row number at the beginning of the line. Storing the column data
			; into a text file is beneficial because launching a new instance of Excel, or even keeping
			; an instance running in the background, uses much more memory. Opening, parsing, 
			; and closing a text file occurs quickly, and the system usage is low. A standard CSV
			; format is another alternative. I decided against a CSV because
			
			If (col = 1)  {
				columnData := columnData . row . ":" . finalStr . "`n"
			} else {
				columnData := columnData . finalStr . "`n"	
			}
		}
        ; Each column is written to an individual text file. If the file exists, it is overwritten.
		; The paths to the files are contained in xlPathArray. The column number is the index
		; to get the path in the array.
        columnFile := FileOpen(xlPathArray[col], "w")
		columnFile.Write(columnData)
		columnFile.Close

   }
    ; Clean up: close Excel workbook, quit Excel application
    wb.Close()
    xl.Quit()
    xl := ""

	; If there were any group IDs on the spreadsheet which contained non-numeric characters,
	; write that information to log and send a message to the user.
	If (notifyGroupID != "") {
		if (logOpenBool = false) InitializeLog("GetWorksheetInfo")
		logFile.Write(notifyGroupID . "`n")
		MsgBox(notifyGroupID)
		notifyGroupID := ""
	}
}
